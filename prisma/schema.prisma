generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  name         String
  phone        String?
  role         UserRole  @default(USER)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  vehicles          Vehicle[]
  parkingSessions   ParkingSession[]
  transactions      Transaction[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Vehicle {
  id           String @id @default(cuid())
  userId       String @map("user_id")
  licensePlate String @map("license_plate")
  state        String
  nickname     String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  parkingSessions ParkingSession[]

  @@unique([licensePlate, state])
  @@map("vehicles")
}

model ParkingZone {
  id               String                @id @default(cuid())
  zoneNumber       String                @unique @map("zone_number")
  zoneName         String                @map("zone_name")
  locationType     ParkingLocationType   @map("location_type")
  ratePerHour      Float                 @map("rate_per_hour")
  maxDurationHours Int                   @map("max_duration_hours")
  address          String
  restrictionsJson Json?                 @map("restrictions_json")
  isActive         Boolean               @default(true) @map("is_active")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")

  parkingSessions ParkingSession[]

  @@map("parking_zones")
}

model ParkingSession {
  id                     String            @id @default(cuid())
  userId                 String            @map("user_id")
  vehicleId              String            @map("vehicle_id")
  zoneId                 String            @map("zone_id")
  startTime              DateTime          @map("start_time")
  endTime                DateTime?         @map("end_time")
  scheduledEndTime       DateTime          @map("scheduled_end_time")
  durationHours          Float             @map("duration_hours")
  baseCost               Float             @map("base_cost")
  taxAmount              Float             @map("tax_amount")
  processingFee          Float             @map("processing_fee")
  totalCost              Float             @map("total_cost")
  status                 SessionStatus     @default(PENDING)
  extendedFromSessionId  String?           @map("extended_from_session_id")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id])
  vehicle      Vehicle       @relation(fields: [vehicleId], references: [id])
  zone         ParkingZone   @relation(fields: [zoneId], references: [id])
  transactions Transaction[]

  extendedFromSession ParkingSession?  @relation("SessionExtension", fields: [extendedFromSessionId], references: [id])
  extensionSessions   ParkingSession[] @relation("SessionExtension")

  @@map("parking_sessions")
}

model Transaction {
  id                  String            @id @default(cuid())
  userId              String            @map("user_id")
  sessionId           String            @map("session_id")
  stripeTransactionId String?           @map("stripe_transaction_id")
  amount              Float
  status              TransactionStatus @default(PENDING)
  failureReason       String?           @map("failure_reason")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  user    User           @relation(fields: [userId], references: [id])
  session ParkingSession @relation(fields: [sessionId], references: [id])

  @@map("transactions")
}

enum UserRole {
  USER
  ADMIN
  ENFORCEMENT
}

enum ParkingLocationType {
  STREET
  GARAGE
  LOT
  METER
}

enum SessionStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
  EXTENDED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}